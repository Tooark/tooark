<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tooark.Utils</name>
    </assembly>
    <members>
        <member name="T:Tooark.Utils.FileConvert">
            <summary>
            Classe estática que fornece métodos para conversão de arquivos e extração de extensões.
            </summary>
        </member>
        <member name="M:Tooark.Utils.FileConvert.ToMemoryStream(System.String)">
            <summary>
            Converte uma string base64 para <see cref="T:System.IO.MemoryStream"/>.
            </summary>
            <param name="stringFile">String de arquivo em base64.</param>
            <returns>Retorna um <see cref="T:System.IO.MemoryStream"/>.</returns>
        </member>
        <member name="M:Tooark.Utils.FileConvert.ToMemoryStream(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Converte uma IFormFile para <see cref="T:System.IO.MemoryStream"/>.
            </summary>
            <param name="fromFile">Arquivo em formato de <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/>.</param>
            <returns>Retorna um <see cref="T:System.IO.MemoryStream"/>.</returns>
        </member>
        <member name="M:Tooark.Utils.FileConvert.Extension(System.String)">
            <summary>
            Extrai a extensão do arquivo.
            </summary>
            <param name="stringFile">String de arquivo em base64.</param>
            <returns>Retorna a extensão do arquivo.</returns>
        </member>
        <member name="M:Tooark.Utils.FileConvert.Extension(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Extrai a extensão do arquivo.
            </summary>
            <param name="fromFile">Arquivo em formato de <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/>.</param>
            <returns>Retorna a extensão do arquivo.</returns>
        </member>
        <member name="T:Tooark.Utils.InternalFileConvert">
            <summary>
            Classe estática interna que fornece métodos para conversão de arquivos e extração de extensões.
            </summary>
        </member>
        <member name="M:Tooark.Utils.InternalFileConvert.ToMemoryStream(System.String)">
            <summary>
            Converte uma string base64 para <see cref="T:System.IO.MemoryStream"/>.
            </summary>
            <param name="file">String de arquivo em base64.</param>
            <returns>Retorna um <see cref="T:System.IO.MemoryStream"/>.</returns>
        </member>
        <member name="M:Tooark.Utils.InternalFileConvert.ToMemoryStream(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Converte uma IFormFile para <see cref="T:System.IO.MemoryStream"/>.
            </summary>
            <param name="fromFile">Arquivo em formato de <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/>.</param>
            <returns>Retorna um <see cref="T:System.IO.MemoryStream"/>.</returns>
        </member>
        <member name="M:Tooark.Utils.InternalFileConvert.Extension(System.String)">
            <summary>
            Extrai a extensão do arquivo.
            </summary>
            <param name="file">String de arquivo em base64.</param>
            <returns>Retorna a extensão do arquivo.</returns>
        </member>
        <member name="M:Tooark.Utils.InternalFileConvert.Extension(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Extrai a extensão do arquivo.
            </summary>
            <param name="fromFile">Arquivo em formato de <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/>.</param>
            <returns>Retorna a extensão do arquivo.</returns>
        </member>
        <member name="T:Tooark.Utils.FileValid">
            <summary>
            Classe estática que fornece métodos para verificar a validade de arquivos.
            </summary>
        </member>
        <member name="M:Tooark.Utils.FileValid.IsImage(Microsoft.AspNetCore.Http.IFormFile,System.Int64)">
            <summary>
            Verifica se o arquivo é uma imagem válida.
            </summary>
            <remarks>
            As extensões de imagem permitidas são: .JPG, .JPEG, .PNG, .GIF, .BMP, .SVG e .WEBP.
            </remarks>
            <param name="file">Arquivo a ser verificado.</param>
            <param name="fileSize">Tamanho máximo do arquivo em bytes. Parâmetro opcional. Valor padrão é 5242880 bytes (5MB).</param>
            <returns>Retorna verdadeiro se o arquivo for uma imagem válida.</returns>
        </member>
        <member name="M:Tooark.Utils.FileValid.IsDocument(Microsoft.AspNetCore.Http.IFormFile,System.Int64)">
            <summary>
            Verifica se o arquivo é um documento válido.
            </summary>
            <remarks>
            As extensões de documento permitidas são: .TXT, .CSV, .LOG, .PDF, .DOC, .DOCX, .XLS, .XLSX, .PPT e .PPTX.
            </remarks>
            <param name="file">Arquivo a ser verificado.</param>
            <param name="fileSize">Tamanho máximo do arquivo em bytes. Parâmetro opcional. Valor padrão é 5242880 bytes (5MB).</param>
            <returns>Retorna verdadeiro se o arquivo for um documento válido.</returns>
        </member>
        <member name="M:Tooark.Utils.FileValid.IsVideo(Microsoft.AspNetCore.Http.IFormFile,System.Int64)">
            <summary>
            Verifica se o arquivo é um video válido.
            </summary>
            <remarks>
            As extensões de video permitidas são: .AVI, .MP4, .MPG, .MPEG e .WMV.
            </remarks>
            <param name="file">Arquivo a ser verificado.</param>
            <param name="fileSize">Tamanho máximo do arquivo em bytes. Parâmetro opcional. Valor padrão é 5242880 bytes (5MB).</param>
            <returns>Retorna verdadeiro se o arquivo for um video válido.</returns>
        </member>
        <member name="M:Tooark.Utils.FileValid.IsCustom(Microsoft.AspNetCore.Http.IFormFile,System.Int64,System.String[])">
            <summary>
            Verifica se o arquivo é valido para extensões personalizadas.
            </summary>
            <param name="file">Arquivo a ser verificado.</param>
            <param name="fileSize">Tamanho máximo do arquivo em bytes. Parâmetro opcional. Valor padrão é 5242880 bytes (5MB).</param>
            <param name="permittedExtensions">Extensões permitidas. Parâmetro opcional. Valor padrão é todas as extensões de imagem, documento e vídeo.</param>
            <returns>Retorna verdadeiro se o arquivo for válido.</returns>
        </member>
        <member name="T:Tooark.Utils.InternalFileValid">
            <summary>
            Classe estática interna que fornece métodos para verificar a validade de arquivos.
            </summary>
        </member>
        <member name="M:Tooark.Utils.InternalFileValid.FileSize(Microsoft.AspNetCore.Http.IFormFile,System.Int64)">
            <summary>
            Verifica se o tamanho do arquivo é válido.
            </summary>
            <param name="file">Arquivo a ser verificado.</param>
            <param name="fileSize">Tamanho máximo do arquivo em bytes. Valor padrão é 5242880 bytes (5MB).</param>
            <returns>Retorna verdadeiro se o tamanho do arquivo for válido.</returns>
        </member>
        <member name="M:Tooark.Utils.InternalFileValid.IsValid(Microsoft.AspNetCore.Http.IFormFile,System.Int64,System.String[])">
            <summary>
            Verifica se o arquivo é válido.
            </summary>
            <param name="file">Arquivo a ser verificado. Formato de <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/></param>
            <param name="fileSize">Tamanho máximo do arquivo em bytes.</param>
            <param name="permittedExtensions">Extensões permitidas.</param>
            <returns>Retorna verdadeiro se o arquivo for válido.</returns>
        </member>
        <member name="M:Tooark.Utils.InternalFileValid.IsImage(Microsoft.AspNetCore.Http.IFormFile,System.Int64)">
            <summary>
            Verifica se o arquivo é uma imagem válida.
            </summary>
            <param name="file">Arquivo a ser verificado. Formato de <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/></param>
            <param name="fileSize">Tamanho máximo do arquivo em bytes. Parâmetro opcional. Valor padrão é 5242880 bytes (5MB).</param>
            <returns>Retorna verdadeiro se o arquivo for uma imagem válida.</returns>
        </member>
        <member name="M:Tooark.Utils.InternalFileValid.IsDocument(Microsoft.AspNetCore.Http.IFormFile,System.Int64)">
            <summary>
            Verifica se o arquivo é um documento válido.
            </summary>
            <param name="file">Arquivo a ser verificado. Formato de <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/></param>
            <param name="fileSize">Tamanho máximo do arquivo em bytes. Parâmetro opcional. Valor padrão é 5242880 bytes (5MB).</param>
            <returns>Retorna verdadeiro se o arquivo for um documento válido.</returns>
        </member>
        <member name="M:Tooark.Utils.InternalFileValid.IsVideo(Microsoft.AspNetCore.Http.IFormFile,System.Int64)">
            <summary>
            Verifica se o arquivo é um video válido.
            </summary>
            <param name="file">Arquivo a ser verificado. Formato de <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/></param>
            <param name="fileSize">Tamanho máximo do arquivo em bytes. Parâmetro opcional. Valor padrão é 5242880 bytes (5MB).</param>
            <returns>Retorna verdadeiro se o arquivo for um video válido.</returns>
        </member>
        <member name="M:Tooark.Utils.InternalFileValid.IsCustom(Microsoft.AspNetCore.Http.IFormFile,System.Int64,System.String[])">
            <summary>
            Verifica se o arquivo é valido para extensões personalizadas.
            </summary>
            <param name="file">Arquivo a ser verificado. Formato de <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/></param>
            <param name="fileSize">Tamanho máximo do arquivo em bytes. Parâmetro opcional. Valor padrão é 5242880 bytes (5MB).</param>
            <param name="permittedExtensions">Extensões permitidas. Parâmetro opcional. Valor padrão é todas as extensões de imagem, documento e vídeo.</param>
            <returns>Retorna verdadeiro se o arquivo for válido.</returns>
        </member>
        <member name="T:Tooark.Utils.GenerateString">
            <summary>
            Classe estática que fornece métodos para gerar strings.
            </summary>
        </member>
        <member name="M:Tooark.Utils.GenerateString.Sequential(System.Int32)">
            <summary>
            Converte um número inteiro em uma representação equivalente alfabético do número.
            </summary>
            <param name="number">O número inteiro maior que zero a ser convertido.</param>
            <returns>Uma string representando o equivalente alfabético do número.</returns>
            <example>
            <code>
            string result = Sequential(1); // result: "a"
            string result = Sequential(27); // result: "aa"
            </code>
            </example>
        </member>
        <member name="M:Tooark.Utils.GenerateString.Password(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gera uma string com critérios específicos.
            </summary>
            <param name="len">Comprimento da string a ser gerada. Valor padrão é 12. Deve ser maior ou igual a 8.</param>
            <param name="upper">Indica se deve incluir caracteres maiúsculos. Valor padrão é true.</param>
            <param name="lower">Indica se deve incluir caracteres minúsculos. Valor padrão é true.</param>
            <param name="number">Indica se deve incluir números. Valor padrão é true.</param>
            <param name="special">Indica se deve incluir caracteres especiais. Valor padrão é true.</param>
            <param name="similarity">Indica se deve utilizar caracteres semelhantes. Valor padrão é false.</param>
            <returns>Uma string gerada de acordo com os critérios especificados.</returns>
            <exception cref="T:System.ArgumentException">Se todos os tipos de caracteres estiverem desativados.</exception>
        </member>
        <member name="M:Tooark.Utils.GenerateString.Hexadecimal(System.Int32)">
            <summary>
             Gera uma string hexadecimal aleatória.
            </summary>
            <param name="sizeToken">O tamanho da string hexadecimal a ser gerada.</param>
            <returns>Uma string hexadecimal aleatória.</returns>
        </member>
        <member name="M:Tooark.Utils.GenerateString.GuidCode">
            <summary>
             Gera uma string Guid sem hífens.
            </summary>
            <returns>Uma string Guid sem hífens.</returns>
        </member>
        <member name="M:Tooark.Utils.GenerateString.Token(System.Int32)">
            <summary>
            Gera uma string de token.
            </summary>
            <param name="length">O comprimento da string de token a ser gerada. Valor padrão é 256. Deve ser maior ou igual a 256.</param>
            <returns>Uma string de token de no mínimo 256 caracteres.</returns>
        </member>
        <member name="T:Tooark.Utils.InternalGenerateString">
            <summary>
            Classe estática interna que fornece métodos para gerar strings.
            </summary>
        </member>
        <member name="M:Tooark.Utils.InternalGenerateString.Sequential(System.Int32)">
            <summary>
            Converte um número inteiro em uma representação equivalente alfabético do número.
            </summary>
            <param name="number">O número inteiro maior que zero a ser convertido.</param>
            <returns>Uma string representando o equivalente alfabético do número.</returns>
            <example>
            <code>
            string result = Sequential(1); // result: "a"
            string result = Sequential(27); // result: "aa"
            </code>
            </example>
        </member>
        <member name="M:Tooark.Utils.InternalGenerateString.Password(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gera uma string com critérios específicos.
            </summary>
            <param name="length">Comprimento da string a ser gerada. Valor padrão é 12. Deve ser maior ou igual a 8.</param>
            <param name="upperChar">Indica se deve incluir caracteres maiúsculos. Valor padrão é true.</param>
            <param name="lowerChar">Indica se deve incluir caracteres minúsculos. Valor padrão é true.</param>
            <param name="numberChar">Indica se deve incluir números. Valor padrão é true.</param>
            <param name="specialChar">Indica se deve incluir caracteres especiais. Valor padrão é true.</param>
            <param name="similarChar">Indica se deve utilizar caracteres semelhantes. Valor padrão é false.</param>
            <returns>Uma string gerada de acordo com os critérios especificados.</returns>
            <exception cref="T:System.ArgumentException">Se todos os tipos de caracteres estiverem desativados.</exception>
        </member>
        <member name="M:Tooark.Utils.InternalGenerateString.Hexadecimal(System.Int32)">
            <summary>
             Gera uma string hexadecimal aleatória.
            </summary>
            <param name="sizeToken">O tamanho da string hexadecimal a ser gerada.</param>
            <returns>Uma string hexadecimal aleatória.</returns>
        </member>
        <member name="M:Tooark.Utils.InternalGenerateString.GuidCode">
            <summary>
             Gera uma string Guid sem hífens.
            </summary>
            <returns>Uma string Guid sem hífens.</returns>
        </member>
        <member name="M:Tooark.Utils.InternalGenerateString.Token(System.Int32)">
            <summary>
            Gera uma string de token.
            </summary>
            <param name="length">O comprimento da string de token a ser gerada. Valor padrão é 256. Deve ser maior ou igual a 256.</param>
            <returns>Uma string de token de no mínimo 256 caracteres.</returns>
        </member>
        <member name="T:Tooark.Utils.GetInfo">
            <summary>
            Classe estática que fornece métodos buscar campo name, title e description.
            </summary>
        </member>
        <member name="M:Tooark.Utils.GetInfo.Name``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            Obtém o nome localizado de uma lista de objetos.
            </summary>
            <remarks>
            O método tenta obter o nome no idioma solicitado. Se não encontrar, tenta obter no idioma padrão da aplicação.
            Se não encontrar, retorna o primeiro item da lista.
            </remarks>
            <param name="list">A lista de objetos.</param>
            <param name="languageCode">O código de idioma. Parâmetro opcional. Padrão é o idioma atual.</param>
            <returns>O nome localizado.</returns>
        </member>
        <member name="M:Tooark.Utils.GetInfo.Title``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            Obtém o título localizado de uma lista de objetos.
            </summary>
            <remarks>
            O método tenta obter o nome no idioma solicitado. Se não encontrar, tenta obter no idioma padrão da aplicação.
            Se não encontrar, retorna o primeiro item da lista.
            </remarks>
            <param name="list">A lista de objetos.</param>
            <param name="languageCode">O código de idioma. Parâmetro opcional. Padrão é o idioma atual.</param>
            <returns>O título localizado.</returns>
        </member>
        <member name="M:Tooark.Utils.GetInfo.Description``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            Obtém a descrição localizado de uma lista de objetos.
            </summary>
            <remarks>
            O método tenta obter o nome no idioma solicitado. Se não encontrar, tenta obter no idioma padrão da aplicação.
            Se não encontrar, retorna o primeiro item da lista.
            </remarks>
            <param name="list">A lista de objetos.</param>
            <param name="languageCode">O código de idioma. Parâmetro opcional. Padrão é o idioma atual.</param>
            <returns>A descrição localizada.</returns>
        </member>
        <member name="M:Tooark.Utils.GetInfo.Custom``1(System.Collections.Generic.IList{``0},System.String,System.String)">
            <summary>
            Obtém um valor localizado de uma propriedade em uma lista de objetos.
            </summary>
            <typeparam name="T">O tipo de objeto na lista.</typeparam>
            <param name="list">A lista de objetos do tipo T.</param>
            <param name="property">O nome da propriedade a ser obtida do objeto.</param>
            <param name="languageCode">O código de idioma atual. Se nulo, usa o idioma padrão da aplicação.</param>
            <returns>
            O valor da propriedade localizada como uma string. Se o item correspondente ao idioma atual não for encontrado,
            tenta retornar o valor no idioma padrão. Se nenhum item for encontrado, retorna uma string vazia.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Lança uma exceção se a propriedade 'LanguageCode' ou a propriedade especificada não existir no tipo T.
            </exception>
        </member>
        <member name="T:Tooark.Utils.InternalGetInfo">
            <summary>
            Classe estática interna que fornece métodos buscar campo name, title e description.
            </summary>
        </member>
        <member name="M:Tooark.Utils.InternalGetInfo.Name``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            Obtém o nome localizado de uma lista de objetos.
            </summary>
            <remarks>
            O método tenta obter o nome no idioma solicitado. Se não encontrar, tenta obter no idioma padrão da aplicação.
            Se não encontrar, retorna o primeiro item da lista.
            </remarks>
            <param name="list">A lista de objetos.</param>
            <param name="languageCode">O código de idioma. Parâmetro opcional. Padrão é o idioma atual.</param>
            <returns>O nome localizado.</returns>
        </member>
        <member name="M:Tooark.Utils.InternalGetInfo.Title``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            Obtém o título localizado de uma lista de objetos.
            </summary>
            <remarks>
            O método tenta obter o nome no idioma solicitado. Se não encontrar, tenta obter no idioma padrão da aplicação.
            Se não encontrar, retorna o primeiro item da lista.
            </remarks>
            <param name="list">A lista de objetos.</param>
            <param name="languageCode">O código de idioma. Parâmetro opcional. Padrão é o idioma atual.</param>
            <returns>O título localizado.</returns>
        </member>
        <member name="M:Tooark.Utils.InternalGetInfo.Description``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            Obtém a descrição localizado de uma lista de objetos.
            </summary>
            <remarks>
            O método tenta obter o nome no idioma solicitado. Se não encontrar, tenta obter no idioma padrão da aplicação.
            Se não encontrar, retorna o primeiro item da lista.
            </remarks>
            <param name="list">A lista de objetos.</param>
            <param name="languageCode">O código de idioma. Parâmetro opcional. Padrão é o idioma atual.</param>
            <returns>A descrição localizada.</returns>
        </member>
        <member name="M:Tooark.Utils.InternalGetInfo.GetLanguageCode``1(System.Collections.Generic.IList{``0},System.String,System.String)">
            <summary>
            Obtém um valor de uma propriedade localizado de uma lista de objetos.
            </summary>
            <remarks>
            O método tenta obter no idioma solicitado.
            Se não encontrar, tenta obter no idioma padrão da aplicação.
            Se não encontrar, tenta obter o primeiro item da lista.
            Se não encontrar, retorna uma string vazia.
            </remarks>
            <typeparam name="T">O tipo de objeto na lista.</typeparam>
            <param name="list">A lista de objetos do tipo T.</param>
            <param name="nameProperty">O nome da propriedade a ser obtida do objeto.</param>
            <param name="languageCode">O código de idioma. Parâmetro opcional. Padrão é o idioma atual.</param>
            <returns> O valor da propriedade localizada como uma string.</returns>
            <exception cref="T:System.InvalidOperationException">
            Lança uma exceção se a propriedade 'LanguageCode' ou a propriedade especificada não existir no tipo T.
            </exception>
        </member>
        <member name="T:Tooark.Utils.Language">
            <summary>
            Classe estática Language que contém constantes e propriedades para gerenciamento de idiomas.
            </summary>
        </member>
        <member name="F:Tooark.Utils.Language.Default">
            <summary>
            O código de idioma padrão usado na aplicação. Padrão "en-US".
            </summary>
        </member>
        <member name="P:Tooark.Utils.Language.Current">
            <summary>
            O código de idioma atual do ambiente de execução.
            </summary>
        </member>
        <member name="P:Tooark.Utils.Language.CurrentCulture">
            <summary>
            A cultura atual do ambiente de execução.
            </summary>
        </member>
        <member name="M:Tooark.Utils.Language.SetCulture(System.String)">
            <summary>
            Função para definir a cultura atual para a aplicação.
            </summary>
            <param name="culture">O nome da cultura a ser definida. Exemplo: "en-US" ou "pt-BR".</param>
        </member>
        <member name="M:Tooark.Utils.Language.SetCulture(System.Globalization.CultureInfo)">
            <summary>
            Função para definir a cultura atual para a aplicação.
            </summary>
            <param name="culture">A cultura a ser definida. Exemplo: "en-US" ou "pt-BR".</param>
        </member>
        <member name="T:Tooark.Utils.InternalLanguage">
            <summary>
            Classe estática interna Language que contém constantes e propriedades para gerenciamento de idiomas.
            </summary>
        </member>
        <member name="F:Tooark.Utils.InternalLanguage._currentCulture">
            <summary>
            Campo privado que armazena a cultura de idioma atual. 
            </summary>
        </member>
        <member name="F:Tooark.Utils.InternalLanguage.Default">
            <summary>
            O código de idioma padrão usado na aplicação. Padrão "en-US".
            </summary>
        </member>
        <member name="P:Tooark.Utils.InternalLanguage.Current">
            <summary>
            O código de idioma atual do ambiente de execução.
            </summary>
        </member>
        <member name="P:Tooark.Utils.InternalLanguage.CurrentCulture">
            <summary>
            A cultura atual do ambiente de execução.
            </summary>
        </member>
        <member name="M:Tooark.Utils.InternalLanguage.SetCulture(System.String)">
            <summary>
            Função para definir a cultura atual para a aplicação.
            </summary>
            <param name="culture">O nome da cultura a ser definida. Exemplo: "en-US" ou "pt-BR".</param>
        </member>
        <member name="M:Tooark.Utils.InternalLanguage.SetCulture(System.Globalization.CultureInfo)">
            <summary>
            Função para definir a cultura atual para a aplicação.
            </summary>
            <param name="culture">A cultura a ser definida. Exemplo: "en-US" ou "pt-BR".</param>
        </member>
        <member name="T:Tooark.Utils.Normalize">
            <summary>
            Classe estática que fornece métodos para normalização de strings.
            </summary>
        </member>
        <member name="M:Tooark.Utils.Normalize.Value(System.String)">
            <summary>
            Normaliza um valor removendo espaços, convertendo para maiúscula e substituindo caracteres especiais.
            </summary>
            <param name="value">O valor a ser normalizado.</param>
            <returns>Uma string contendo o valor normalizado.</returns>
        </member>
        <member name="M:Tooark.Utils.Normalize.ValueRegex(System.String)">
            <summary>
            Normaliza um valor removendo espaços, convertendo para maiúscula e substituindo caracteres especiais.
            </summary>
            <param name="value">O valor a ser normalizado.</param>
            <returns>Uma string contendo o valor normalizado.</returns>
        </member>
        <member name="T:Tooark.Utils.InternalNormalize">
            <summary>
            Classe interna estática parcial que fornece métodos para normalização de strings.
            </summary>
        </member>
        <member name="M:Tooark.Utils.InternalNormalize.Value(System.String)">
            <summary>
            Normaliza um valor removendo espaços, convertendo para maiúscula e substituindo caracteres especiais.
            </summary>
            <param name="value">O valor a ser normalizado.</param>
            <returns>Uma string contendo o valor normalizado.</returns>
        </member>
        <member name="M:Tooark.Utils.InternalNormalize.ValueRegex(System.String)">
            <summary>
            Normaliza um valor removendo espaços, convertendo para maiúscula e substituindo caracteres especiais.
            </summary>
            <param name="value">O valor a ser normalizado.</param>
            <returns>Uma string contendo o valor normalizado.</returns>
        </member>
        <member name="M:Tooark.Utils.InternalNormalize.SpaceRegex">
            <remarks>
            Pattern:<br/>
            <code>\\s</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a whitespace character.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tooark.Utils.InternalNormalize.CRegex">
            <remarks>
            Pattern:<br/>
            <code>[Ç]</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [\u00C7\u00E7].<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tooark.Utils.InternalNormalize.NRegex">
            <remarks>
            Pattern:<br/>
            <code>[Ñ]</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [\u00D1\u00F1].<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tooark.Utils.InternalNormalize.YRegex">
            <remarks>
            Pattern:<br/>
            <code>[ŸÝ]</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [\u00DD\u00FD\u00FF\u0178].<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tooark.Utils.InternalNormalize.ARegex">
            <remarks>
            Pattern:<br/>
            <code>[ÂÄÀÅÁÃ]</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [\u00C0-\u00C5\u00E0-\u00E5\u212B].<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tooark.Utils.InternalNormalize.ERegex">
            <remarks>
            Pattern:<br/>
            <code>[ÉÊËÈ]</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [\u00C8-\u00CB\u00E8-\u00EB].<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tooark.Utils.InternalNormalize.IRegex">
            <remarks>
            Pattern:<br/>
            <code>[ÏÎÌÍ]</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [\u00CC-\u00CF\u00EC-\u00EF].<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tooark.Utils.InternalNormalize.ORegex">
            <remarks>
            Pattern:<br/>
            <code>[ÔÖÒÓÕ]</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [\u00D2-\u00D6\u00F2-\u00F6].<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tooark.Utils.InternalNormalize.URegex">
            <remarks>
            Pattern:<br/>
            <code>[ÜÛÙÚ]</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [\u00D9-\u00DC\u00F9-\u00FC].<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tooark.Utils.InternalNormalize.AcceptRegex">
            <remarks>
            Pattern:<br/>
            <code>[^0-9A-Z]</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [^0-9A-Za-z\u212A].<br/>
            </code>
            </remarks>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SpaceRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the SpaceRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.SpaceRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SpaceRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SpaceRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SpaceRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SpaceRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SpaceRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SpaceRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CRegex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the CRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.CRegex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CRegex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CRegex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CRegex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CRegex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CRegex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CRegex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NRegex_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the NRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.NRegex_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NRegex_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NRegex_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NRegex_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NRegex_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NRegex_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NRegex_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.YRegex_3">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the YRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.YRegex_3.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.YRegex_3.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.YRegex_3.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.YRegex_3.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.YRegex_3.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.YRegex_3.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.YRegex_3.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ARegex_4">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ARegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ARegex_4.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ARegex_4.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ARegex_4.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ARegex_4.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ARegex_4.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ARegex_4.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ARegex_4.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ERegex_5">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ERegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ERegex_5.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ERegex_5.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ERegex_5.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ERegex_5.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ERegex_5.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ERegex_5.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ERegex_5.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IRegex_6">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IRegex_6.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IRegex_6.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IRegex_6.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IRegex_6.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IRegex_6.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IRegex_6.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IRegex_6.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ORegex_7">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ORegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ORegex_7.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ORegex_7.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ORegex_7.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ORegex_7.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ORegex_7.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ORegex_7.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ORegex_7.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.URegex_8">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the URegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.URegex_8.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.URegex_8.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.URegex_8.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.URegex_8.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.URegex_8.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.URegex_8.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.URegex_8.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AcceptRegex_9">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AcceptRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AcceptRegex_9.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AcceptRegex_9.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AcceptRegex_9.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AcceptRegex_9.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AcceptRegex_9.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AcceptRegex_9.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AcceptRegex_9.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IndexOfAnyWhiteSpace(System.ReadOnlySpan{System.Char})">
            <summary>Finds the next index of any character that matches a whitespace character.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiExceptWhiteSpace">
            <summary>Supports searching for characters in or not in "\0\u0001\u0002\u0003\u0004\u0005\u0006\a\b\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f!\"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u007f".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_nonAscii_46E3FAA2E94950B9D41E9AB1B570CAB55D04A30009110072B4BC074D57272527">
            <summary>Supports searching for characters in or not in "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzK".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_nonAscii_503E12EA1D0FBAC04B84416EF69E91D8924D7EBB7638EB1ACBF809E0A3E73A6D">
            <summary>Supports searching for characters in or not in "ÙÚÛÜùúûü".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_nonAscii_765473E99A0166432234F149F7BB8A42DA2136897C6B45FF0A6DD0AEA03DB132">
            <summary>Supports searching for characters in or not in "ÀÁÂÃÄÅàáâãäåÅ".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_nonAscii_8361533779F0012BC9C0B5A58948D5C2FB941F65A508456858BE4715F49AB414">
            <summary>Supports searching for characters in or not in "ÈÉÊËèéêë".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_nonAscii_971EF99567BA9D3CE2835CC79C1BCE3DCA4D7FC783B6829587D4A32B7ADD617D">
            <summary>Supports searching for characters in or not in "ÒÓÔÕÖòóôõö".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_nonAscii_A02ACA9615A840283D0A8FFA2B49D4C1D8E441202AABA0AF291368D30BC8DA67">
            <summary>Supports searching for characters in or not in "ÌÍÎÏìíîï".</summary>
        </member>
    </members>
</doc>
